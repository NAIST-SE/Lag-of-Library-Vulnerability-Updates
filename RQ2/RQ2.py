import json
import glob
import cliffsDelta
import numpy as np
from collections import defaultdict as ddict
from scipy import stats

def RQ2_lineage(lags_dict):
    lags = dict()
    lags['latest'] = [list() for i in range(5)]
    lags['supported'] = [list() for i in range(5)]

    for vul in lags_dict: 
        lineage = lags_dict[vul]['package']['lineage_freshness']
        for client in lags_dict[vul]['client']:
            hop = client['downstream_propagation'] if client['downstream_propagation'] < 4 else 4
            if client['lags_day'] == None:
                continue
            lags[lineage][hop].append(client['lags_day'])
            
    print('='*50)
    print('(RQ2) A summary statistic of lags in the propagation (# days) categorized by lineage freshness. Note that lags in the table is not accumulative.')
    print('='*50)
    print('Lineage, Down Prop., # clients, Mean, Median, SD')
    for lineage in ['latest', 'supported']:
        for hop in range(1, 5):
            print('%s, %d, %d, %.2f, %.2f, %.2f'%(lineage, hop, len(lags[lineage][hop]), np.mean(lags[lineage][hop]), np.median(lags[lineage][hop]), np.std(lags[lineage][hop])))
    print('='*50)
    print()

def RQ2_severity(lags_dict, report_dict):
    lags = dict()
    lags['high'] = [list() for i in range(5)]
    lags['medium'] = [list() for i in range(5)]
    lags['low'] = [list() for i in range(5)]

    for vul in lags_dict:
        severity = report_dict[vul]['severity']
        for client in lags_dict[vul]['client']:
            hop = client['downstream_propagation'] if client['downstream_propagation'] < 4 else 4
            if client['lags_day'] == None:
                continue
            lags[severity][hop].append(client['lags_day'])

    print('='*50)
    print('(RQ2) A summary statistic of lags in the propagation (# days) categorized by vulnerability severity. Note that lags in the table is not accumulative.')
    print('='*50)
    print('Severity, Down Prop., # clients, Mean, Median, SD')
    for severity in ['high', 'medium', 'low']:
        for hop in range(1, 5):
            print('%s, %d, %d, %.2f, %.2f, %.2f'%(severity, hop, len(lags[severity][hop]), np.mean(lags[severity][hop]), np.median(lags[severity][hop]), np.std(lags[severity][hop])))
    print('='*50)
    print()

def RQ2_stat_test(lags_dict, report_dict):
    lags = dict()
    lags['high'] = [{'latest': [], 'supported': []} for i in range(5)]
    lags['medium'] = [{'latest': [], 'supported': []} for i in range(5)]
    lags['low'] = [{'latest': [], 'supported': []} for i in range(5)]

    for vul in lags_dict:
        severity = report_dict[vul]['severity']
        lineage = lags_dict[vul]['package']['lineage_freshness']
        for client in lags_dict[vul]['client']:
            hop = client['downstream_propagation'] if client['downstream_propagation'] < 4 else 4
            if client['lags_day'] == None:
                continue
            lags[severity][hop][lineage].append(client['lags_day'])

    print('='*50)
    print('(RQ2) Statistical test (Kruskal-Wallis) and effect size (Cliff\'s delta) for lags in the latest lineage and the supported lineage')
    print('='*50)
    print('Severity, Down Prop., Kruskal-Wallis H statistic, p-value, effect size')
    for severity in ['high', 'medium', 'low']:
        for hop in range(1, 5):
            if len(lags[severity][hop]['latest']) == 0:
                break
            hop_lineage_test = stats.kruskal(lags[severity][hop]['latest'], lags[severity][hop]['supported'])
            delta, res = cliffsDelta.cliffsDelta(lags[severity][hop]['latest'], lags[severity][hop]['supported'])
            print('%s, %d, %f, %s, %.2f'%(severity, hop, hop_lineage_test[0], 'True' if hop_lineage_test[1] < 0.001 else 'False', delta))
    print('='*50)
    for severity in ['high', 'medium', 'low']:
        for hop in range(1, 5):
            mid_ll = np.median(lags[severity][hop]['latest'])
            mid_sl = np.median(lags[severity][hop]['supported'])
            if mid_ll > mid_sl:
                print(severity, hop, 'LL > SL')
            else:
                print(severity, hop, 'LL < SL')

if __name__ == '__main__':
    json_files = glob.glob('./rq2_data/*.json')
    lags_dict = dict()
    for fi in json_files:
        with open(fi) as f: lags_dict[fi.split('/')[-1][:-5]] = json.loads(f.read())

    report_files = glob.glob('../report/report_data/*.json')
    report_dict = dict()
    for fi in report_files:
        with open(fi) as f: report_dict[fi.split('/')[-1][:-5]] = json.loads(f.read())

    RQ2_lineage(lags_dict)
    RQ2_severity(lags_dict, report_dict)
    RQ2_stat_test(lags_dict, report_dict)
