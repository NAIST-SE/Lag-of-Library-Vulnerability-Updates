import json
import glob
import numpy as np
from collections import defaultdict as ddict
from scipy import stats

def RQ2_lineage(lags_dict, affected_latest_lineage, affected_supported_lineage):
    lags = dict()
    lags['latest'] = [list() for i in range(5)]
    lags['supported'] = [list() for i in range(5)]

    for vul in lags_dict: 
        lineage = 'latest' if vul in affected_latest_lineage else 'supported'
        for client in lags_dict[vul]:
            hop = client['downstream_propagation'] if client['downstream_propagation'] < 4 else 4
            if client['lags_day'] == None:
                continue
            lags[lineage][hop].append(client['lags_day'])
            
    print('='*50)
    print('(RQ2) A summary statistic of lags in the propagation (# days) categorized by lineage freshness. Note that lags in the table is not accumulative.')
    print('='*50)
    print('Lineage, Down Prop., # clients, Mean, Median, SD')
    for lineage in ['latest', 'supported']:
        for hop in range(1, 5):
            print('%s, %d, %d, %.2f, %.2f, %.2f'%(lineage, hop, len(lags[lineage][hop]), np.mean(lags[lineage][hop]), np.median(lags[lineage][hop]), np.std(lags[lineage][hop])))
    print('='*50)
    print()

def RQ2_severity(lags_dict, report_dict):
    lags = dict()
    lags['high'] = [list() for i in range(5)]
    lags['medium'] = [list() for i in range(5)]
    lags['low'] = [list() for i in range(5)]

    for vul in lags_dict:
        severity = report_dict[vul]['severity']
        for client in lags_dict[vul]:
            hop = client['downstream_propagation'] if client['downstream_propagation'] < 4 else 4
            if client['lags_day'] == None:
                continue
            lags[severity][hop].append(client['lags_day'])

    print('='*50)
    print('(RQ2) A summary statistic of lags in the propagation (# days) categorized by vulnerability severity. Note that lags in the table is not accumulative.')
    print('='*50)
    print('Severity, Down Prop., # clients, Mean, Median, SD')
    for severity in ['high', 'medium', 'low']:
        for hop in range(1, 5):
            print('%s, %d, %d, %.2f, %.2f, %.2f'%(severity, hop, len(lags[severity][hop]), np.mean(lags[severity][hop]), np.median(lags[severity][hop]), np.std(lags[severity][hop])))
    print('='*50)
    print()

if __name__ == '__main__':
    json_files = glob.glob('./rq2_data/*.json')
    lags_dict = dict()
    for fi in json_files:
        with open(fi) as f: lags_dict[fi.split('/')[-1][:-5]] = json.loads(f.read())

    report_files = glob.glob('../report/report_data/*.json')
    report_dict = dict()
    for fi in report_files:
        with open(fi) as f: report_dict[fi.split('/')[-1][:-5]] = json.loads(f.read())

    with open('affected_latest_lineage.list') as f: affected_latest_lineage = set(map(lambda w: w.strip(), f.readlines()))
    with open('affected_supported_lineage.list') as f: affected_supported_lineage = set(map(lambda w: w.strip(), f.readlines()))

    RQ2_lineage(lags_dict, affected_latest_lineage, affected_supported_lineage)
    RQ2_severity(lags_dict, report_dict)
