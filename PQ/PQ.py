import json
import glob
from collections import defaultdict as ddict
from scipy import stats
import plotly.graph_objs as go

def PQ1(vul_list):
    counter = ddict(int)
    fixing_release_update = ['major', 'minor', 'patch']

    all_counter = 0
    for vul in vul_list:
        counter[vul['release_type']] += 1
        all_counter += 1

    print('='*50)
    print('(PQ1) fixing release update distribution')
    for it in fixing_release_update:
        print('%s: %d (%.2f%%)'%(it, counter[it], counter[it]/all_counter*100))
    print('all_counter:', all_counter)
    print('='*50)
    print()

def PQ2(vul_list):
    plot_cumulative_frequency(vul_list)
    plot_fixing_commit_dist(vul_list)

    print('='*50)
    print('(PQ2) ploting cumulative frequency distribution of fixing commits: cum_freq_dist.pdf')
    print('(PQ2) ploting lines of code distribution in fixing commits: loc_fixing_commit.pdf')
    print('='*50)
    print()

def plot_cumulative_frequency(vul_list):
    percent_fixing_commits = sorted([vul['num_fix_commits']/vul['num_release_commits']*100 for vul in vul_list])
    cumulative_frequency = stats.cumfreq(percent_fixing_commits, defaultreallimits = (-1, 101), numbins=len(percent_fixing_commits))

    trace = go.Scatter(
        name = 'Fixing release',
        x = [0] + percent_fixing_commits,
        y = [0] + list(map(lambda w: w/len(percent_fixing_commits) * 100, cumulative_frequency.cumcount))
    )

    layout = go.Layout(
        showlegend = False,
        yaxis = dict(
            title = 'Cumulative Frequency Distribution<br>(Fixing releases)',
            titlefont = dict(size=16),
            range = [0, 100],
            ticksuffix = '%'
        ),
        xaxis = dict(
            title = 'Fixing commits (%)',
            titlefont = dict(size=16),
            range = [0, 20],
            ticksuffix = '%'
        ),
        shapes = [
            dict(
                type = 'line',
                x0 = 14.28,
                x1 = 14.28,
                y0 = 0,
                y1 = 110,
                line = dict(
                    color = 'black',
                    dash = 'dash'
                )
            ),
            dict(
                type = 'line',
                x0 = 0,
                x1 = 110,
                y0 = 91.34,
                y1 = 91.34,
                line = dict(
                    color = 'black',
                    dash = 'dash'
                )
            )
        ]
    )

    fig = go.Figure(data=[trace], layout=layout)
    fig.write_html('cum_freq_dist.html')
    fig.write_image('cum_freq_dist.pdf', height=400, width=600)
    
def plot_fixing_commit_dist(vul_list):
    lines_of_codes = [vul['num_fix_lines'] for vul in vul_list]

    trace = go.Box(
        y = lines_of_codes,
        name = 'Fixing commit',
        boxpoints=False,
    )

    layout = go.Layout(
        yaxis = dict(
            title = '# Lines of Code',
            titlefont = dict(size=16),
            range = [0, 30],
            dtick=2
        ),
        xaxis = dict(
            titlefont = dict(size=16)
        ),
        showlegend=False
    )

    fig = go.Figure(data=[trace], layout=layout)
    fig.write_html('loc_fixing_commit.html')
    fig.write_image('loc_fixing_commit.pdf', height=400, width=600)

if __name__ == '__main__':
    json_files = glob.glob('./pq_data/*.json')
    vul_list = list()
    for fi in json_files:
        with open(fi) as f: vul_list.append(json.loads(f.read()))

    PQ1(vul_list)
    PQ2(vul_list)
